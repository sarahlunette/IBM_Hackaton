automated-resource-allocation/
├── config/
│   ├── config.yaml                  # Thresholds, API keys (HF, X/Twitter, etc.)
│   └── logging_config.yaml          # Structured logging across services
│
├── data/
│   ├── raw/                         # Unfiltered social media JSON, image data
│   └── processed/                   # Cleaned text, sentiment scores, metadata
│
├── models/
│   ├── allocation_model.py          # Predict priority + match resources
│   ├── ibm_granite_integration.py   # GenAI model interface
│   └── crisis_classifier.py         # Zero-shot or fine-tuned classifier for crisis types
│
├── resources/
│   ├── resource_dispatcher.py       # Matching available resources to predicted needs
│   ├── utilities.py                 # Shared utilities (e.g., GPS parser, time formatter)
│   └── resources_registry.yaml      # YAML file of all available resources
│
├── services/
│   ├── data_collector.py            # Scrape/stream social media (X, IG, etc.)
│   ├── geo_locator.py               # NLP location tagging and GPS resolution
│   ├── sentiment_analyzer.py        # Emotional signal extractor (optional GenAI)
│   ├── resource_allocator.py        # Combines classifier output + dispatch logic
│   └── dispatcher.py                # Communication with real-world or simulated units
│
├── dashboard/
│   ├── streamlit_app.py             # Optional UI for real-time monitoring
│   └── api_backend.py               # RESTful interface for external apps
│
├── tests/
│   ├── test_resource_allocator.py
│   ├── test_dispatcher.py
│   ├── test_integration.py
│   ├── test_geo_locator.py
│   └── test_crisis_classifier.py
│
├── main.py                          # Full pipeline: data → classification → allocation
└── requirements.txt                 # Include transformers, torch, streamlit, etc.
